2d1
< # Core stuff
4d2
< # Pygame
8,15c6,8
< if not pygame.font:
<     print 'Warning, fonts disabled'
<     sys.exit(1)
< if not pygame.mixer:
<     print 'Warning, sound disabled'
<     sys.exit(1)
< # Our files
< from interface import *
---
> 
> if not pygame.font: print 'Warning, fonts disabled'
> if not pygame.mixer: print 'Warning, sound disabled'
18d10
< FPS = 60
21,24c13
< STATE_MAINMENU  = 0
< STATE_PLAYING   = 1
< STATE_GAMEOVER  = 2
< 
---
> RAGENUMBER = 0
29d17
<         # Screen
33,36c21,37
<         # Background
<         self.background = pygame.Surface(self.screen.get_size())
<         self.background = self.background.convert()
<         self.background.fill((0,0,0))
---
>         
>         # Scoring
>         self.score = 0
>         self.lasttimescore = 0
>         self.gameWon = False
> 
>         # Spawning
>         self.lastpoweruptime = 0
>         self.lastenemyspawn = 0
>         self.lastsuperenemyspawn = 0
>         self.supernumber = 0
>         self.enemyspawnrate = 1500
> 
>         # Theme
>         self.film = 0
>         self.filmtitle = "National Treasure"
>         self.filmarray = ["National Treasure 2", "Ghost Rider", "Ghost Rider 2", "Wicker Man", "Bangkok Dangerous", "Vampire's Kiss", "Season of the Witch", "Face/Off", "Sorcerer's Apprectice", "Gone in Sixty Seconds", "Con Air"]
38,40c39,41
<         # Fonts
<         self.headerfont = pygame.font.Font(None, 36)
<         self.gamestatfont = pygame.font.Font(None, 24)
---
>         # Chapter Number
>         self.curchapter = 1
>         self.lastchapterchange = 0
42,43c43,44
<         # Chapters
<         self.filmarray = ["National Treasure 2", "Ghost Rider", "Ghost Rider 2", "Wicker Man", "Bangkok Dangerous", "Vampire's Kiss", "Season of the Witch", "Face/Off", "Sorcerer's Apprectice", "Gone in Sixty Seconds", "Con Air"]
---
>         # Interface
>         self.rageomfg = Rect(WIDTH - 125,HEIGHT-25,125,25)
45,47c46,61
<         # Inteface
<         self.interface = Interface(self.screen)
<         self.bottomhudheight = 45
---
>     def Loop(self):
>         self.LoadSprites()
>         self.background = pygame.Surface(self.screen.get_size())
>         self.background = self.background.convert()
>         self.background.fill((0,0,0))
>         font = pygame.font.Font(None,36)
>         text = font.render("Nic Cage is releasing a new film!", 1, (255,0,0))
>         textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
>         self.screen.blit(text,textpos)
>         pygame.display.flip()
>         pygame.time.delay(2000)
>         poster = pygame.image.load("data/images/movie-1.png")
>         self.screen.blit(poster,(0,0))
>         pygame.display.flip()
>         pygame.time.delay(2000)
>         initialDelay = 5000
49,50d62
<         # Start main menu
<         self.ChangeState(STATE_MAINMENU)
52d63
<     def Loop(self):
54c65,67
<         clock = pygame.time.Clock()  
---
>         clock = pygame.time.Clock()
>         
>         
58,59c71,74
<             clock.tick(FPS)
<             curtime = self.gametick()
---
>             clock.tick(60)
>             curtime = pygame.time.get_ticks() - initialDelay
> 
>             
66,77c81
<                     if(self.GetState() == STATE_MAINMENU):
<                         mousepos = pygame.mouse.get_pos()
<                         # Have they clicked on the start button
<                         if(self.startbutton.Clicked(mousepos)):
<                             # Change the game state to playing and update our curtime
<                             curtime = self.ChangeState(STATE_PLAYING)
<                         # Have they clicked on the quit button
<                         elif(self.quitbutton.Clicked(mousepos)):
<                             # Stop the loop
<                             running = False
<                     elif(self.GetState() == STATE_PLAYING and (curtime - self.cage.lastrage) > self.cage.ragedelay):
<                         # Shooting mechanism
---
>                     if((curtime - self.cage.lastrage) > self.cage.ragedelay):
79a84,86
>                         while(self.cage.rageamount > 1):
>                             self.rage_sprites.add(Rage(self.cage, mousepos))
>                             self.cage.rageamount -= 1
85,114d91
<                     elif(self.GetState() == STATE_GAMEOVER):
<                         mousepos = pygame.mouse.get_pos()
<                         # Have they clicked on the main menu button
<                         if(self.menubutton.Clicked(mousepos)):
<                             # Change the game state to the main menu and update our curtime
<                             curtime = self.ChangeState(STATE_MAINMENU)
< 
<             if(self.GetState() == STATE_PLAYING):
<                 playablearea = self.GetPlayableRect()
<                 
<                 # De-Rage Cage
<                 if((curtime - self.cage.lastrage) > 1000):
<                     self.cage.image = self.cage.cageimg
<                 
<                 # Enemy Creation
<                 if((curtime - self.lastenemyspawn) > self.enemyspawnrate):
<                     self.lastenemyspawn = curtime
<                     self.enemy_sprites.add(Enemy(playablearea))
< 
<                 # Super Enemy Creation
<                 if((curtime - self.lastsuperenemyspawn) > 15000):
<                     self.lastsuperenemyspawn = curtime
<                     self.superenemy_sprites.add(SuperEnemy(playablearea))
<                     self.supernumber += 1
< 
<                 # Super Enemy Changes
<                 if(self.supernumber >= 1):
<                     self.enemyspawnrate = 750
<                 else:
<                     self.enemyspawnrate = 1500
116,135c93,133
<                 # Powerup Creation
<                 if((curtime - self.lastpoweruptime) > 10000):
<                     self.lastpoweruptime = curtime
<                     self.powerup_sprites.add(PowerUp(playablearea))
< 
<                 # Movement stuff
<                 self.cage.move(key.get_pressed(), playablearea)
<                 self.enemy_sprites.update(self.cage)
<                 self.rage_sprites.update(self.rage_sprites, playablearea)
<                 self.superenemy_sprites.update(self.cage)
< 
<                 # Collision detection
<                 # Enemy collides with cage
<                 collidelist = pygame.sprite.spritecollide(self.cage,self.enemy_sprites,False)
<                 if collidelist:
<                     self.ChangeState(STATE_GAMEOVER)
<                     curtime = self.gametick()
<                 # Enemy collides with bullet
<                 collidelist = pygame.sprite.groupcollide(self.enemy_sprites,self.rage_sprites,True,self.cage.gothroughpowerup)
<                 if collidelist:
---
>             # De-Rage Cage
>             if((curtime - self.cage.lastrage) > 1000):
>                 self.cage.image = self.cage.cageimg
>             
>             # Enemy Creation
>             if((curtime - self.lastenemyspawn) > self.enemyspawnrate):
>                 self.lastenemyspawn = curtime
>                 self.enemy_sprites.add(Enemy())
> 
>             # Super Enemy Creation
>             if((curtime - self.lastsuperenemyspawn) > 15000):
>                 self.lastsuperenemyspawn = curtime
>                 self.superenemy_sprites.add(SuperEnemy())
>                 self.supernumber += 1
> 
>             # Super Enemy Changes
>             if(self.supernumber >= 1):
>                 self.enemyspawnrate = 7500
>             else:
>                 self.enemyspawnrate = 15000
> 
>             # Powerup Creation
>             if((curtime - self.lastpoweruptime) > 1000):
>                 self.lastpoweruptime = curtime
>                 self.powerup_sprites.add(PowerUp(self))
> 
>             # Movement stuff
>             self.cage.move(key.get_pressed())
>             self.enemy_sprites.update(self.cage)
>             self.rage_sprites.update(self.rage_sprites)
>             self.superenemy_sprites.update(self.cage)
> 
>             # Collision detection
>             # Enemy collides with cage
>             collidelist = pygame.sprite.spritecollide(self.cage,self.enemy_sprites,False)
>             if collidelist:
>                 if pygame.font:
>                     running = False
>             # Enemy collides with bullet
>             collidelist = pygame.sprite.groupcollide(self.enemy_sprites,self.rage_sprites,True,self.cage.gothroughpowerup)
>             if collidelist:
137,139c135,137
<                 # Super Enemy collides with bullet
<                 collidelist = pygame.sprite.groupcollide(self.superenemy_sprites,self.rage_sprites,True,self.cage.gothroughpowerup)
<                 if collidelist:
---
>             # Super Enemy collides with bullet
>             collidelist = pygame.sprite.groupcollide(self.superenemy_sprites,self.rage_sprites,True,self.cage.gothroughpowerup)
>             if collidelist:
142,170c140,174
<                 # Cage Collides with powerup
<                 collidelist = pygame.sprite.spritecollide(self.cage,self.powerup_sprites,True)
<                 if collidelist:
<                     self.cage.powerupgot = curtime
<                     self.cage.powerupend = curtime + collidelist[0].length
<                     self.cage.ragedelay = collidelist[0].ragedelay
<                     self.cage.gothroughpowerup = False
<                 elif (curtime >= self.cage.powerupend and self.cage.powerupend != 0):
<                     self.cage.ragedelay = self.cage.defaultdelay
<                     self.cage.powerupend = 0
<                     self.cage.gothroughpowerup = True
<                 # Scoring
< 
<                 if((curtime - self.lasttimescore) >= 1000):
<                     self.lasttimescore = curtime
<                     self.score+=1
< 
< 
<                 # Chapter Changes
< 
<                 if((curtime - self.lastchapterchange) >= 10000):
<                     self.lastchapterchange = curtime
<                     if(self.curchapter >= 12):
<                         self.gameWon = True
<                         running = False
<                     else:
<                         self.curchapter+=1
<                         self.filmtitle = self.filmarray[random.randint(0,(self.filmarray.__len__() - 1))]
<                         self.filmarray.remove(self.filmtitle)
---
>             # Cage Collides with powerup
>             collidelist = pygame.sprite.spritecollide(self.cage,self.powerup_sprites,True)
>             if collidelist:
>                 self.cage.powerupgot = curtime
>                 self.cage.powerupend = curtime + collidelist[0].length
>                 self.cage.ragedelay = collidelist[0].ragedelay
>                 self.cage.gothroughpowerup = collidelist[0].gothroughpowerup
>                 self.cage.poweruptype = collidelist[0].poweruptype
>             elif (curtime >= self.cage.powerupend and self.cage.powerupend != 0):
>                 self.cage.ragedelay = self.cage.defaultdelay
>                 self.cage.powerupend = 0
>                 self.cage.gothroughpowerup = True
>                 self.cage.poweruptype = 0
>                 
>             # Scoring
> 
>             if((curtime - self.lasttimescore) >= 1000):
>                 self.lasttimescore = curtime
>                 self.score+=1
> 
> 
>             # Chapter Changes
> 
>             if((curtime - self.lastchapterchange) >= 11000):
>                 self.lastchapterchange = curtime
>                 if(self.curchapter >= 12):
>                     self.gameWon = True
>                     running = False
>                 else:
>                     self.curchapter+=1
>                     self.filmtitle = self.filmarray[random.randint(0,(self.filmarray.__len__() - 1))]
>                     self.filmarray.remove(self.filmtitle)
>          
>             # Render stuff
>             self.screen.blit(self.background, (0, 0))
172a177,188
> 
>             # Sprites
>             self.enemy_sprites.draw(self.screen)
>             self.superenemy_sprites.draw(self.screen)
>             self.cage_sprite.draw(self.screen)
>             self.rage_sprites.draw(self.screen)
>             self.powerup_sprites.draw(self.screen)
> 
>             if (curtime < 2000):
>                 text = font.render("Here come the reviews!", 1, (255,0,0))
>                 textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
>                 self.screen.blit(text,textpos)
173a190,193
>             # Rage-o-meter
>             tempwidth = (float(curtime-self.cage.lastrage)/self.cage.ragedelay) * 125
>             if (tempwidth > 125):
>                 tempwidth = 125
174a195
>             self.rageomfg.width = tempwidth
175a197
>             pygame.draw.rect(self.screen,(255,0,0),self.rageomfg)
177,214c199,203
<             # Render stuff
< 
<             if self.GetState() == STATE_MAINMENU:
<                 self.ClearScreen()
<                 # Title
<                 text = self.headerfont.render("Nick Cage Film Battle Royale", 1, (255, 0, 0))
<                 textpos = text.get_rect(centerx=self.width/2, centery=self.height/8)
<                 self.screen.blit(text, textpos)
< 
<                 # Start button
<                 self.interface.RenderButton(self.startbutton)
<                 self.interface.RenderButton(self.quitbutton)
<             elif self.GetState() == STATE_PLAYING:
<                 self.ClearScreen()
<                 # Sprites
<                 self.enemy_sprites.draw(self.screen)
<                 self.superenemy_sprites.draw(self.screen)
<                 self.cage_sprite.draw(self.screen)
<                 self.rage_sprites.draw(self.screen)
<                 self.powerup_sprites.draw(self.screen)
<                 # Render the text (score, month, film) and the charge meter
<                 self.RenderPlayingInterface()
<                 # Starting message
<                 if (curtime <= 2000):
<                     text = self.headerfont.render("Here come the reviews!", 1, (255,0,0))
<                     textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
<                     self.screen.blit(text,textpos)
<             elif self.GetState() == STATE_GAMEOVER:
<                 if (self.gameWon):
<                     text = self.headerfont.render("THE RAGE SAVED THE CAGE! WELL DONE!", 1, (255,255,0))
<                     textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
<                     self.screen.blit(text,textpos)
<                 else:
<                     text = self.headerfont.render("THE RAGE COULD NOT SAVE THE CAGE!", 1, (255,255,0))
<                     textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
<                     self.screen.blit(text,textpos)
<                 text = self.headerfont.render("Game Over.", 1, (255,255,0))
<                 textpos = text.get_rect(centerx=self.width/2,centery=(self.height/2+36))
---
>             # Text
>             if pygame.font:
>                 font = pygame.font.Font(None,36)
>                 text = font.render("Score: {:d}".format(self.score), 1, (255,0,0))
>                 textpos = text.get_rect(centerx=self.width/2)
216c205,210
<                 self.interface.RenderButton(self.menubutton)
---
>                 text2 = font.render ("Current Film: " + self.filmtitle, 1, (255,0,0))
>                 textpos = text.get_rect(centerx=self.width/8,centery=(HEIGHT - 20))
>                 self.screen.blit(text2,textpos)
>                 text3 = font.render ("Current Month: " + str(self.curchapter), 1, (255,0,0))
>                 textpos = text.get_rect(centerx=self.width/8, centery = (HEIGHT - 100))
>                 self.screen.blit(text3,textpos)
217a212,226
>                 if not running:
>                     if (self.gameWon):
>                         font = pygame.font.Font(None,36)
>                         text = font.render("THE RAGE SAVED THE CAGE! WELL DONE!", 1, (255,255,0))
>                         textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
>                         self.screen.blit(text,textpos)
>                     else:
>                         font = pygame.font.Font(None,36)
>                         text = font.render("THE RAGE COULD NOT SAVE THE CAGE!", 1, (255,255,0))
>                         textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
>                         self.screen.blit(text,textpos)
>                     text = font.render("Game Over.", 1, (255,255,0))
>                     textpos = text.get_rect(centerx=self.width/2,centery=(self.height/2+36))
>                     self.screen.blit(text,textpos)
>                     
218a228
>         pygame.time.delay(3000)
222c232,233
<         self.cage = Cage(self.GetPlayableRect())
---
>         self.cage = Cage()
>         self.cage.poweruptype = 0
229,325d239
<     # Returns the time since the start of the current state
<     def gametick(self):
<         return pygame.time.get_ticks() - self.statestarttime
< 
<     # Resets the game tick to start from 0 again (used when changing states)
<     def gametickstart(self):
<         self.statestarttime = pygame.time.get_ticks()
< 
<     # Returns the current game state
<     def GetState(self):
<         return self.gamestate
< 
<     # Returns a rect containing the playable area of the screen
<     def GetPlayableRect(self):
<         return Rect(0, 0, self.width, self.height-self.bottomhudheight)
< 
<     """
<         ChangeState
<         Input: The integer state to change to
<         Description: Sets the current game state to input and runs necessary init code
<         Returns: The current tick. If state change is successful, this will be 0.
<     """
<     def ChangeState(self, newstate):
<         if newstate == STATE_MAINMENU:
<             self.startbutton = Button(Rect(self.width/2 - 100, self.height/2 - 30, 200, 60), "Start")
<             self.quitbutton = Button(Rect(self.width/2 - 100, self.startbutton.rect.bottom + self.interface.buttonpadding, 200, 60), "Quit")
<         elif newstate == STATE_PLAYING:
<             self.LoadSprites()
<             self.ClearScreen()
<             text = self.headerfont.render("Nic Cage is releasing a new film!", 1, (255,0,0))
<             textpos = text.get_rect(centerx=self.width/2,centery=self.height/2)
<             self.screen.blit(text,textpos)
<             pygame.display.flip()
<             pygame.time.delay(2000)
<             poster = pygame.image.load("data/images/movie-1.png")
<             self.screen.blit(poster,(0,0))
<             pygame.display.flip()
<             pygame.time.delay(2000)
<                 
<             # Scoring
<             self.score = 0
<             self.lasttimescore = 0
<             self.gameWon = False
< 
<             # Spawning
<             self.lastpoweruptime = 0
<             self.lastenemyspawn = 0
<             self.lastsuperenemyspawn = 0
<             self.supernumber = 0
<             self.enemyspawnrate = 1500
< 
<             # Theme
<             self.film = 0
<             self.filmtitle = "National Treasure"
< 
<             # Chapter Number
<             self.curchapter = 1
<             self.lastchapterchange = 0
<         elif newstate == STATE_GAMEOVER:
<             self.menubutton = Button(Rect(self.width/2 - 100, self.height/4 - 30, 200, 60), "Main Menu")
<         else:
<             return self.gametick()
< 
<         # Now that we've initialized the state, we can update the game's state variable and reset the game tick
<         self.gamestate = newstate
<         self.gametickstart()
<         return self.gametick()
<     def ClearScreen(self):
<         self.screen.blit(self.background, (0, 0))
<     def RenderPlayingInterface(self):
<         # "Rage" charge meter
<         ragerect = Rect(self.width - 105, self.height - 35, min((float(self.gametick()-self.cage.lastrage)/self.cage.ragedelay) * 100, 100), 30)
< 
<         # Interface background
<         interfaceborder = Rect(0, self.height - (ragerect.height + 15), self.width, ragerect.height + 15)
<         interfacebackground = Rect(0, self.height - (ragerect.height + 10), self.width, ragerect.height + 10)
<         
<         # Text
<         # Score
<         score = self.gamestatfont.render("Score: {:d}".format(self.score), 1, (255,0,0))
<         scorepos = score.get_rect(left=5,top=5)
<         # Month
<         month = self.gamestatfont.render ("Month: " + str(self.curchapter), 1, (255,0,0))
<         monthpos = month.get_rect(left=5, centery=interfacebackground.centery)
<         # Film
<         film = self.gamestatfont.render (self.filmtitle, 1, (255,0,0))
<         filmpos = film.get_rect(left=monthpos.right + 35, centery=interfacebackground.centery)
< 
<         # Render interface
<         pygame.draw.rect(self.screen, (255,0,0), interfaceborder)
<         pygame.draw.rect(self.screen, (0,0,0), interfacebackground)
<         self.screen.blit(score, scorepos)
<         self.screen.blit(month, monthpos)
<         self.screen.blit(film, filmpos)
<         pygame.draw.rect(self.screen, (0,255,0), ragerect)
< 
< # Cage (player) class
327c241
<     def __init__(self, playablerect):
---
>     def __init__(self):
338,339c252,253
<         self.rect.x = playablerect.right/2 - self.rect.width/2
<         self.rect.y = playablerect.bottom/2 - self.rect.height/2
---
>         self.rect.x = WIDTH/2 - self.rect.width/2
>         self.rect.y = HEIGHT/2 - self.rect.height/2
347a262
>         self.rageamount = 1
351c266
<     def move(self, keys_pressed, playablerect):
---
>     def move(self,keys_pressed):
358c273
<             if(self.rect.right + self.movement <= playablerect.right):
---
>             if(self.rect.x + self.movement + self.rect.width <= WIDTH):
361c276
<             if(self.rect.left - self.movement >= playablerect.left):
---
>             if(self.rect.x - self.movement >= 0):
364c279
<             if(self.rect.top - self.movement >= playablerect.top):
---
>             if(self.rect.y - self.movement >= 0):
367c282
<             if(self.rect.bottom + self.movement <= playablerect.bottom):
---
>             if(self.rect.y + self.movement + self.rect.height <= HEIGHT):
369d283
<         #If the player is trying to move in x and y, move diagonally
377c291
<     def __init__(self, cage, mousepos):
---
>     def __init__(self,cage, mousepos):
380c294,341
<         self.base_image = pygame.image.load('data/images/rage-small.png')
---
>         if(cage.rageamount == 1):
>             cage.rageamount = 1
>             if(cage.poweruptype == 0):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>             
>             elif(cage.poweruptype == 1):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 2):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 3):
>                 self.base_image = pygame.image.load('data/images/rage-tiny.png')
>                 cage.rageamount = 6
>                             
>             elif(cage.poweruptype == 4):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 5):
>                 self.base_image = pygame.image.load('data/images/rage-tiny.png')
>                 cage.rageamount = 10 
>                 
>             elif(cage.poweruptype == 6):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 7):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 8):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 9):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 10):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 11):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>                 
>             elif(cage.poweruptype == 12):
>                 self.base_image = pygame.image.load('data/images/rage-small.png')
>         else:
>             if(cage.poweruptype == 3):
>                 self.base_image = pygame.image.load('data/images/rage-tiny.png')
>             if(cage.poweruptype == 5):
>                 self.base_image = pygame.image.load('data/images/rage-tiny.png')
>                 
394a356,362
>         if(cage.poweruptype == 5):
>             if(cage.rageamount > 1 and cage.rageamount <= 6):
>                 DIFFX -= ((cage.rageamount - 3) * (DIFFX * 0.25))
>                 DIFFY -= ((cage.rageamount - 3) * (DIFFY * 0.25))
>             if(cage.rageamount > 6 and cage.rageamount <= 10):
>                 DIFFX += ((cage.rageamount - 7) * (DIFFX * 0.25))
>                 DIFFY += ((cage.rageamount - 7) * (DIFFY * 0.25))
397a366,387
>         if(cage.poweruptype == 3):
>             if(cage.rageamount > 2 and cage.rageamount <= 4):
>                 if(self.movey < 0 and self.movex < 0):
>                     self.movex -= ((cage.rageamount - 1) * 0.3)
>                     self.movey += ((cage.rageamount - 1) * 0.5)
>                 elif(self.movey > 0 and self.movex > 0):
>                     self.movex += ((cage.rageamount - 1) * 0.3)
>                     self.movey -= ((cage.rageamount - 1) * 0.5)
>                 else:
>                     self.movex += ((cage.rageamount - 1) * 0.3)
>                     self.movey += ((cage.rageamount - 1) * 0.5)
>             if(cage.rageamount > 4 and cage.rageamount <= 6):
>                 if(self.movey < 0 or self.movex < 0):
>                     self.movex += ((cage.rageamount - 3) * 0.3)
>                     self.movey -= ((cage.rageamount - 3) * 0.5)
>                 elif(self.movey > 0 and self.movex > 0):
>                     self.movex -= ((cage.rageamount - 3) * 0.3)
>                     self.movey += ((cage.rageamount - 3) * 0.5)
>                 else:
>                     self.movex -= ((cage.rageamount - 3) * 0.3)
>                     self.movey -= ((cage.rageamount - 3) * 0.5)
> 
399c389,394
<         rotate = math.acos((DIFFY/DISTANCE))
---
>         if(DIFFY/DISTANCE > 1):
>             rotate = math.acos(1)
>         elif(DIFFY/DISTANCE < -1):
>             rotate = math.acos(-1)
>         else:
>             rotate = math.acos((DIFFY/DISTANCE))
405a401,416
>         if(cage.poweruptype == 3):
>             if(cage.rageamount > 2 and cage.rageamount <= 4):
>                 if(self.movex > 0 and self.movey < 0):
>                     rotate += ((cage.rageamount-3) * 10)
>                 else:
>                     rotate -= ((cage.rageamount-3) * 10)
>             if(cage.rageamount > 4 and cage.rageamount <= 6):
>                 if(self.movex > 0 and self.movey < 0):
>                     rotate -= ((cage.rageamount-3) * 10)
>                 else:
>                     rotate += ((cage.rageamount-3) * 10)
>         if(cage.poweruptype == 5):
>             if(cage.rageamount > 1 and cage.rageamount <= 6):
>                 rotate -= ((cage.rageamount-1) * 18)
>             if(cage.rageamount > 6 and cage.rageamount <= 10):
>                 rotate += ((cage.rageamount-3) * 18)
408d418
< 
410c420
<     def update(self, spritegroup, playablerect):
---
>     def update(self,spritegroup):
416,419c426,429
<         if((self.rect.left > playablerect.right)
<            or(self.rect.top > playablerect.bottom)
<            or(self.rect.right < playablerect.left)
<            or(self.rect.bottom < playablerect.top)):
---
>         if((self.rect.x > WIDTH)
>            or(self.rect.y > HEIGHT)
>            or(self.rect.x + self.rect.width < 0)
>            or(self.rect.y + self.rect.height <0)):
425c435
<     def __init__(self, playablerect):
---
>     def __init__(self, main):
427c437,497
<         self.image = pygame.image.load('data/images/powerup.png')
---
> 
>         uniquepower = random.randint(3,3)
>         self.gothroughpowerup = True
>         self.ragedelay = 2000
>         if(uniquepower == 3):
>             if(main.filmtitle == "National Treasure"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 1
>             elif(main.filmtitle == "National Treasure 2"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 500
>                 self.poweruptype = 2
>             elif(main.filmtitle == "Ghost Rider"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.gothroughpowerup = False
>                 self.ragedelay = 2000
>                 self.poweruptype = 3
>             elif(main.filmtitle == "Ghost Rider 2"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.gothroughpowerup = False
>                 self.ragedelay = 1500
>                 self.poweruptype = 4
>             elif(main.filmtitle == "Wicker Man"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 5
>             elif(main.filmtitle == "Bangkok Dangerous"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 6
>             elif(main.filmtitle == "Vampire's Kiss"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 7
>             elif(main.filmtitle == "Season of the Witch"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 8
>             elif(main.filmtitle == "Face/Off"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 9
>             elif(main.filmtitle == "Sorcerer's Apprectice"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 10
>             elif(main.filmtitle == "Con Air"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 11
>             elif(main.filmtitle == "Gone in Sixty Seconds"):
>                 self.image = pygame.image.load('data/images/powerup.png')
>                 self.ragedelay = 1000
>                 self.poweruptype = 12
>         else:
>             self.image = pygame.image.load('data/images/powerup.png')
>             self.ragedelay = 1000
>             self.gothroughpowerup = True
>             self.poweruptype = 0
>         self.poweruptype = 3
429d498
<         self.ragedelay = 1000
431,432c500,501
<         self.rect.x = random.randint(playablerect.left, playablerect.right)
<         self.rect.y = random.randint(playablerect.top, playablerect.bottom)
---
>         self.rect.x = random.randint(0,WIDTH)
>         self.rect.y = random.randint(0,HEIGHT)
436c505
<     def __init__(self, playablerect):
---
>     def __init__(self):
443,444c512,513
<             startY = playablerect.top-self.rect.height
<             startX = random.randint(playablerect.left, playablerect.right)
---
>             startY = -self.rect.height
>             startX = random.randint(0,WIDTH)
446,447c515,516
<             startY = playablerect.bottom
<             startX = random.randint(playablerect.left, playablerect.right)
---
>             startY = HEIGHT
>             startX = random.randint(0,WIDTH)
449,450c518,519
<             startX = playablerect.right
<             startY = random.randint(playablerect.top, playablerect.bottom)
---
>             startX = WIDTH
>             startY = random.randint(0,HEIGHT)
452,453c521,522
<             startX = playablerect.left-self.rect.width
<             startY = random.randint(playablerect.top, playablerect.bottom)
---
>             startX = -self.rect.width
>             startY = random.randint(0,HEIGHT)
456,457d524
<         self.accuratex = startX
<         self.accuratey = startY
461d527
<         # Work out the difference in position between the enemy and the player
466,467c532,533
<             self.accuratex = cage.rect.x
<             self.accuratey = cage.rect.y
---
>             self.rect.x = cage.rect.x
>             self.rect.y = cage.rect.y
469c535
<             self.accuratey += math.copysign(self.movement, DIFFY)
---
>             self.rect.y += math.copysign(self.movement, DIFFY)
471c537
<             self.accuratex += math.copysign(self.movement, DIFFX)
---
>             self.rect.x += math.copysign(self.movement, DIFFX)
473,477c539,547
<             self.accuratex += self.movement * (DIFFX/DISTANCE)
<             self.accuratey += self.movement * (DIFFY/DISTANCE)
<         # Actually move the sprite. We truncate the more accurate versions of their coordinates
<         self.rect.x = int(self.accuratex)
<         self.rect.y = int(self.accuratey)
---
>             changex = int(self.movement * (DIFFX/DISTANCE))
>             changey = int(self.movement * (DIFFY/DISTANCE))
>             if(changex == 0):
>                 changey += math.copysign(1, DIFFY)
>             if(changey == 0):
>                 changex += math.copysign(1, DIFFX)
>             changedist = math.sqrt((changex**2)+(changey**2))
>             self.rect.x += changex
>             self.rect.y += changey
480c550,551
<     def __init__(self, playablerect):
---
> 
>     def __init__(self):
486,487c557,558
<             startY = playablerect.top-self.rect.height
<             startX = random.randint(playablerect.left, playablerect.right)
---
>             startY = -self.rect.height
>             startX = random.randint(0,WIDTH)
489,490c560,561
<             startY = playablerect.bottom
<             startX = random.randint(playablerect.left, playablerect.right)
---
>             startY = HEIGHT
>             startX = random.randint(0,WIDTH)
492,493c563,564
<             startX = playablerect.right
<             startY = random.randint(playablerect.top, playablerect.bottom)
---
>             startX = WIDTH
>             startY = random.randint(0,HEIGHT)
495,496c566,567
<             startX = playablerect.left-self.rect.width
<             startY = random.randint(playablerect.top, playablerect.bottom)
---
>             startX = -self.rect.width
>             startY = random.randint(0,HEIGHT)
499c570,571
<         self.movement = 2
---
>         self.movement = 1
> 
